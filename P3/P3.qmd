---
title: "P3: Trip Generation"
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor: visual
---

## Load libraries

```{r, warning=FALSE, message=FALSE}

library(tidyverse)
library(here)
library(knitr)
library(srvyr)
library(mlogit)
library(caret)
library(pscl)

here("code",
     "mlogit_helpers.R") |>
  source()
```

## Load datasets

```{r}
hh_data <- here("data",
                "NHTS",
                "hhpub.csv") |>
  read_csv(show_col_types = FALSE) 

person_data <- here("data",
                    "NHTS",
                    "perpub.csv") |>
  read_csv(show_col_types = FALSE)

trip_data <- here("data",
                    "NHTS",
                    "trippub.csv") |>
  read_csv(show_col_types = FALSE)  |>
  select(HOUSEID,
         PERSONID,
         TDTRPNUM,
         TRIPPURP,
         WHYFROM,
         WHYTO,
         TRPTRANS, 
         R_AGE,
         EDUC,
         WTTRDFIN)
```

### Link up unlinked trips

```{r}
# manage transfer trips

trip_data <- trip_data |>
  mutate(transfer_trip = WHYTO == "07" | WHYFROM == "07")

transfer_trips <- trip_data |>
  filter(transfer_trip) |>
  filter(WHYTO != WHYFROM) # remove trips that begin AND end with a transfer

next_destination <- c(transfer_trips$WHYTO[2:nrow(transfer_trips)], "last")

transfer_trips <- transfer_trips |>
  mutate(next_destination = next_destination) |>
  mutate(WHYTO = ifelse(WHYTO == "07", next_destination, WHYTO)) |>
  filter(WHYFROM != "07") |>
  select(-next_destination)

trip_data <- trip_data |>
  filter(!transfer_trip) |>
  rbind(transfer_trips) |>
  select(-TRIPPURP, -TRPTRANS, -transfer_trip)
```

## Select and construct predictor variables

```{r, message=FALSE}
person_data <- person_data |>
  mutate(has_med_cond = case_when(MEDCOND == "01" ~ TRUE,
                              MEDCOND == "02" ~ FALSE))

hh_data <- hh_data |>
  mutate(HHFAMINC = as.numeric(HHFAMINC)) |>
  filter(HHFAMINC > 0) |>
  mutate(income = case_when(HHFAMINC < 4 ~ "low",
                             HHFAMINC < 5 & HHSIZE > 1 ~ "low",
                             HHFAMINC < 6 & HHSIZE > 3 ~ "low",
                             HHFAMINC < 7 & HHSIZE > 5 ~ "low",
                             HHFAMINC < 8 & HHSIZE > 7 ~ "low",
                             HHFAMINC > 8 ~ "high",
                            TRUE ~ "middle")) |>
  mutate(income = factor(income, levels = c("low", "middle", "high"))) |>
  select(HOUSEID,
         income)
```

```{r, message=FALSE}
# add hh family income to person with medical condition
persons <- person_data |>
  select(HOUSEID, PERSONID, MEDCOND, R_SEX, R_RACE, R_AGE) |>
  mutate(female = R_SEX == "02") |>
  mutate(has_med_cond = case_when(MEDCOND == "01" ~ TRUE,
                              MEDCOND == "02" ~ FALSE)) |>
  select(HOUSEID, PERSONID, R_RACE, R_AGE, female, has_med_cond) |>
  inner_join(hh_data)

head(persons)
```

```{r, message=FALSE}
tot_trips <- trip_data |>
  group_by(HOUSEID, PERSONID) |>
  summarise(tot_trips = n())

persons <- persons |>
  left_join(tot_trips) |>
  replace_na(list(tot_trips = 0)) |>
  mutate(income = factor(income, levels = c("low", "middle", "high")))
```

## Data visualization

```{r}
ggplot(persons) +
  geom_histogram(aes(x = tot_trips),
                 binwidth = 1,
                 color = "gray",
                 fill = "lightgreen") +
  scale_x_continuous(name = "Number of trips",
                     breaks = seq(0, 12, by=1)) +
  scale_y_continuous(name = "Persons with medical condition in sample") +
  theme_minimal()
```

```{r}
persons |>
  summarise(`Average count of total trips` = mean(tot_trips),
            `Standard deviation` = sd(tot_trips)) |>
  kable(digits = 3)
```

## Estimate models

```{r}
med_model_3 <- zeroinfl(tot_trips ~ has_med_cond + income + income:has_med_cond, 
   data = persons, dist = "poisson")  
summary(med_model_3)
```

```{r}
AIC(med_model_3)
```
